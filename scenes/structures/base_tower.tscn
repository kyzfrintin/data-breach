[gd_scene load_steps=18 format=2]

[ext_resource path="res://addons/shaderV/rgba/noise/worley3d.gd" type="Script" id=1]
[ext_resource path="res://addons/shaderV/tools/sinTime.gd" type="Script" id=2]
[ext_resource path="res://addons/shaderV/rgba/posterize.gd" type="Script" id=3]
[ext_resource path="res://scenes/structures/base_tower.gd" type="Script" id=4]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 11.3137, 11.3137 )

[sub_resource type="VisualShaderNodeCustom" id=2]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 1, 4, 0 ]
script = ExtResource( 1 )

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id=4]
default_input_values = [ 0, 1.0, 1, 1.0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeInput" id=5]
input_name = "color"

[sub_resource type="VisualShaderNodeCustom" id=6]
output_port_for_preview = 0
default_input_values = [ 1, 8.0 ]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeVectorOp" id=7]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 7

[sub_resource type="VisualShader" id=8]
code = "shader_type canvas_item;


// WorleyNoise3D

vec2 cellular3dNoiseFunc(vec3 P, float _jitter_w3d) {
	float K = 0.142857142857;
	float Ko = 0.428571428571;
	float K2 = 0.020408163265306;
	float Kz = 0.166666666667;
	float Kzo = 0.416666666667;
	
	vec3 Pi = floor(P) - floor(floor(P) * (1.0 / 289.0)) * 289.0;
	vec3 Pf = fract(P) - 0.5;
	
	vec3 Pfx = Pf.x + vec3(1.0, 0.0, -1.0);
	vec3 Pfy = Pf.y + vec3(1.0, 0.0, -1.0);
	vec3 Pfz = Pf.z + vec3(1.0, 0.0, -1.0);
	
	vec3 p = ((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)*(Pi.x+vec3(-1.0,0.0,1.0)))-floor(((34.0*(Pi.x+vec3(-1.0,0.0,1.0))+1.0)
				*(Pi.x+vec3(-1.0,0.0,1.0)))*(1.0/289.0))*289.0;
	vec3 p1 = ((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))-floor(((34.0*(p+Pi.y-1.0)+1.0)*(p+Pi.y-1.0))*(1.0/289.0))*289.0;
	vec3 p2 = ((34.0*(p+Pi.y)+1.0)*(p+Pi.y))-floor(((34.0*(p+Pi.y)+1.0)*(p+Pi.y))*(1.0/289.0))*289.0;
	vec3 p3 = ((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))-floor(((34.0*(p+Pi.y+1.0)+1.0)*(p+Pi.y+1.0))*(1.0/289.0))*289.0;
	
	vec3 p11 = ((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))-floor(((34.0*(p1+Pi.z-1.0)+1.0)*(p1+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p12 = ((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))-floor(((34.0*(p1+Pi.z)+1.0)*(p1+Pi.z))*(1.0/289.0))*289.0;
	vec3 p13 = ((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))-floor(((34.0*(p1+Pi.z+1.0)+1.0)*(p1+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p21 = ((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))-floor(((34.0*(p2+Pi.z-1.0)+1.0)*(p2+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p22 = ((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))-floor(((34.0*(p2+Pi.z)+1.0)*(p2+Pi.z))*(1.0/289.0))*289.0;
	vec3 p23 = ((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))-floor(((34.0*(p2+Pi.z+1.0)+1.0)*(p2+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 p31 = ((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))-floor(((34.0*(p3+Pi.z-1.0)+1.0)*(p3+Pi.z-1.0))*(1.0/289.0))*289.0;
	vec3 p32 = ((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))-floor(((34.0*(p3+Pi.z)+1.0)*(p3+Pi.z))*(1.0/289.0))*289.0;
	vec3 p33 = ((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))-floor(((34.0*(p3+Pi.z+1.0)+1.0)*(p3+Pi.z+1.0))*(1.0/289.0))*289.0;
	
	vec3 ox11 = fract(p11*K) - Ko;
	vec3 oy11 = ((floor(p11*K))-floor((floor(p11*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz11 = floor(p11*K2)*Kz - Kzo;
	
	vec3 ox12 = fract(p12*K) - Ko;
	vec3 oy12 = ((floor(p12*K))-floor((floor(p12*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz12 = floor(p12*K2)*Kz - Kzo;
	
	vec3 ox13 = fract(p13*K) - Ko;
	vec3 oy13 = ((floor(p13*K))-floor((floor(p13*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz13 = floor(p13*K2)*Kz - Kzo;
	
	vec3 ox21 = fract(p21*K) - Ko;
	vec3 oy21 = ((floor(p21*K))-floor((floor(p21*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz21 = floor(p21*K2)*Kz - Kzo;
	
	vec3 ox22 = fract(p22*K) - Ko;
	vec3 oy22 = ((floor(p22*K))-floor((floor(p22*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz22 = floor(p22*K2)*Kz - Kzo;
	
	vec3 ox23 = fract(p23*K) - Ko;
	vec3 oy23 = ((floor(p23*K))-floor((floor(p23*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz23 = floor(p23*K2)*Kz - Kzo;
	
	vec3 ox31 = fract(p31*K) - Ko;
	vec3 oy31 = ((floor(p31*K))-floor((floor(p31*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz31 = floor(p31*K2)*Kz - Kzo;
	
	vec3 ox32 = fract(p32*K) - Ko;
	vec3 oy32 = ((floor(p32*K))-floor((floor(p32*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz32 = floor(p32*K2)*Kz - Kzo;
	
	vec3 ox33 = fract(p33*K) - Ko;
	vec3 oy33 = ((floor(p33*K))-floor((floor(p33*K))*(1.0/7.0))*7.0)*K - Ko;
	vec3 oz33 = floor(p33*K2)*Kz - Kzo;
	
	vec3 dx11 = Pfx + _jitter_w3d*ox11;
	vec3 dy11 = Pfy.x + _jitter_w3d*oy11;
	vec3 dz11 = Pfz.x + _jitter_w3d*oz11;
	
	vec3 dx12 = Pfx + _jitter_w3d*ox12;
	vec3 dy12 = Pfy.x + _jitter_w3d*oy12;
	vec3 dz12 = Pfz.y + _jitter_w3d*oz12;
	
	vec3 dx13 = Pfx + _jitter_w3d*ox13;
	vec3 dy13 = Pfy.x + _jitter_w3d*oy13;
	vec3 dz13 = Pfz.z + _jitter_w3d*oz13;
	
	vec3 dx21 = Pfx + _jitter_w3d*ox21;
	vec3 dy21 = Pfy.y + _jitter_w3d*oy21;
	vec3 dz21 = Pfz.x + _jitter_w3d*oz21;
	
	vec3 dx22 = Pfx + _jitter_w3d*ox22;
	vec3 dy22 = Pfy.y + _jitter_w3d*oy22;
	vec3 dz22 = Pfz.y + _jitter_w3d*oz22;
	
	vec3 dx23 = Pfx + _jitter_w3d*ox23;
	vec3 dy23 = Pfy.y + _jitter_w3d*oy23;
	vec3 dz23 = Pfz.z + _jitter_w3d*oz23;
	
	vec3 dx31 = Pfx + _jitter_w3d*ox31;
	vec3 dy31 = Pfy.z + _jitter_w3d*oy31;
	vec3 dz31 = Pfz.x + _jitter_w3d*oz31;
	
	vec3 dx32 = Pfx + _jitter_w3d*ox32;
	vec3 dy32 = Pfy.z + _jitter_w3d*oy32;
	vec3 dz32 = Pfz.y + _jitter_w3d*oz32;
	
	vec3 dx33 = Pfx + _jitter_w3d*ox33;
	vec3 dy33 = Pfy.z + _jitter_w3d*oy33;
	vec3 dz33 = Pfz.z + _jitter_w3d*oz33;
	
	vec3 d11 = dx11 * dx11 + dy11 * dy11 + dz11 * dz11;
	vec3 d12 = dx12 * dx12 + dy12 * dy12 + dz12 * dz12;
	vec3 d13 = dx13 * dx13 + dy13 * dy13 + dz13 * dz13;
	vec3 d21 = dx21 * dx21 + dy21 * dy21 + dz21 * dz21;
	vec3 d22 = dx22 * dx22 + dy22 * dy22 + dz22 * dz22;
	vec3 d23 = dx23 * dx23 + dy23 * dy23 + dz23 * dz23;
	vec3 d31 = dx31 * dx31 + dy31 * dy31 + dz31 * dz31;
	vec3 d32 = dx32 * dx32 + dy32 * dy32 + dz32 * dz32;
	vec3 d33 = dx33 * dx33 + dy33 * dy33 + dz33 * dz33;

	vec3 d1a = min(d11, d12);
	d12 = max(d11, d12);
	d11 = min(d1a, d13);
	d13 = max(d1a, d13);
	d12 = min(d12, d13);
	vec3 d2a = min(d21, d22);
	d22 = max(d21, d22);
	d21 = min(d2a, d23);
	d23 = max(d2a, d23);
	d22 = min(d22, d23);
	vec3 d3a = min(d31, d32);
	d32 = max(d31, d32);
	d31 = min(d3a, d33);
	d33 = max(d3a, d33);
	d32 = min(d32, d33);
	vec3 da = min(d11, d21);
	d21 = max(d11, d21);
	d11 = min(da, d31);
	d31 = max(da, d31);
	d11.xy = (d11.x < d11.y) ? d11.xy : d11.yx;
	d11.xz = (d11.x < d11.z) ? d11.xz : d11.zx;
	d12 = min(d12, d21);
	d12 = min(d12, d22);
	d12 = min(d12, d31);
	d12 = min(d12, d32);
	d11.yz = min(d11.yz,d12.xy);
	d11.y = min(d11.y,d12.z);
	d11.y = min(d11.y,d11.z);
	return sqrt(d11.xy);
}

// Posterize

vec3 p0ster1zeFunc(vec3 _col_p0sr1ze, float _steps_p0sterize){
	return floor(_col_p0sr1ze * _steps_p0sterize) / (_steps_p0sterize - 1.0);
}


void vertex() {
// Output:0

}

void fragment() {
// Input:5
	vec3 n_out5p0 = COLOR.rgb;

// Input:3
	vec3 n_out3p0 = vec3(UV, 0.0);

// SinTIME:4
	float n_in4p0 = 1.00000;
	float n_in4p1 = 1.00000;
	float n_out4p0;
	{
		n_out4p0 = n_in4p1 * sin(n_in4p0 * TIME);
	}

// WorleyNoise3D:2
	vec3 n_in2p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in2p2 = 5.00000;
	float n_in2p3 = 1.00000;
	float n_out2p0;
	float n_out2p1;
	{
		vec2 n_out2p0n_out2p1 = cellular3dNoiseFunc(vec3((n_out3p0.xy+n_in2p1.xy)*n_in2p2, n_out4p0), min(max(n_in2p3, 0.0), 1.0));
		n_out2p0 = n_out2p0n_out2p1.x;
		n_out2p1 = n_out2p0n_out2p1.y;
	}

// Posterize:6
	float n_in6p1 = 8.00000;
	vec3 n_out6p0;
	{
		n_out6p0 = p0ster1zeFunc(vec3(n_out2p0), n_in6p1);
	}

// VectorOp:7
	vec3 n_in7p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out7p0 = min(n_out6p0, n_in7p1);

// Output:0
	COLOR.rgb = n_out5p0;
	COLOR.a = dot(n_out7p0, vec3(0.333333, 0.333333, 0.333333));

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -61, 56 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 540, 140 )
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -160, 280 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -360, 160 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( -440, 300 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( -60, 80 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( 120, 240 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( 320, 200 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 0, 4, 0, 2, 4, 5, 0, 0, 0, 2, 0, 6, 0, 6, 0, 7, 0, 7, 0, 0, 1 )

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )

[sub_resource type="Animation" id=10]
length = 10.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("box2:rect_rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 10 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 360.0 ]
}

[sub_resource type="CircleShape2D" id=11]
radius = 200.0

[sub_resource type="StyleBoxFlat" id=12]
bg_color = Color( 0.0705882, 0.878431, 0.109804, 1 )

[sub_resource type="StyleBoxFlat" id=13]
bg_color = Color( 0.937255, 0.0705882, 0.0705882, 0.129412 )

[node name="base_tower" type="KinematicBody2D"]
script = ExtResource( 4 )
team = "Neutral"

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
rotation = 0.785398
shape = SubResource( 1 )

[node name="box2" type="ColorRect" parent="."]
material = SubResource( 9 )
margin_left = -16.0
margin_top = -16.0
margin_right = 16.0
margin_bottom = 16.0
rect_rotation = 131.664
rect_pivot_offset = Vector2( 16, 16 )
color = Color( 0, 0, 0, 1 )
__meta__ = {
"_edit_use_anchors_": false
}

[node name="box" type="Polygon2D" parent="."]
show_behind_parent = true
polygon = PoolVector2Array( 0, -16, 16, 0, 0, 16, -16, 0 )

[node name="Line2D" type="Line2D" parent="."]
points = PoolVector2Array( 0, 0, 32, 0 )
width = 1.0
default_color = Color( 1, 1, 1, 1 )

[node name="Position2D" type="Position2D" parent="Line2D"]
position = Vector2( 32, 0 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "rotate"
anims/rotate = SubResource( 10 )

[node name="range" type="Area2D" parent="."]
monitorable = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="range"]
shape = SubResource( 11 )

[node name="attack_timer" type="Timer" parent="."]
wait_time = 0.3
one_shot = true

[node name="ProgressBar" type="ProgressBar" parent="."]
margin_left = -8.0
margin_top = 20.0
margin_right = 8.0
margin_bottom = 21.0
custom_styles/fg = SubResource( 12 )
custom_styles/bg = SubResource( 13 )
max_value = 200.0
value = 200.0
percent_visible = false
__meta__ = {
"_edit_use_anchors_": false
}

[connection signal="body_entered" from="range" to="." method="_on_range_body_entered"]
[connection signal="timeout" from="attack_timer" to="." method="_on_attack_timer_timeout"]
