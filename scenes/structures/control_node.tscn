[gd_scene load_steps=22 format=2]

[ext_resource path="res://grid.png" type="Texture" id=1]
[ext_resource path="res://addons/shaderV/rgba/posterize.gd" type="Script" id=2]
[ext_resource path="res://addons/shaderV/rgba/noise/simplex3d.gd" type="Script" id=3]
[ext_resource path="res://addons/shaderV/tools/TimeScaled.gd" type="Script" id=4]
[ext_resource path="res://scenes/structures/control_node.gd" type="Script" id=5]

[sub_resource type="VisualShaderNodeCustom" id=1]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 0 ]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeCustom" id=2]
default_input_values = [ 1, 8.0 ]
script = ExtResource( 2 )

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "uv"

[sub_resource type="VisualShaderNodeCustom" id=4]
default_input_values = [ 0, 1.0 ]
script = ExtResource( 4 )

[sub_resource type="VisualShader" id=5]
code = "shader_type canvas_item;


// SimplexNoise3D

vec4 _permute_simplex3_n0ise(vec4 x) {
	return ((x * 34.0) + 1.0) * x - floor(((x * 34.0) + 1.0) * x * (1.0 / 289.0)) * 289.0;
}
float simplex3dN0iseFunc(vec3 v) { 
	vec2 C = vec2(1.0/6.0, 1.0/3.0) ;
	vec4 D = vec4(0.0, 0.5, 1.0, 2.0);
	
	vec3 i  = floor(v + dot(v, vec3(C.y)));
	vec3 x0 = v - i + dot(i, vec3(C.x)) ;
	
	vec3 g = step(x0.yzx, x0.xyz);
	vec3 l = 1.0 - g;
	vec3 i1 = min( g.xyz, l.zxy );
	vec3 i2 = max( g.xyz, l.zxy );
	
	vec3 x1 = x0 - i1 + vec3(C.x);
	vec3 x2 = x0 - i2 + vec3(C.y);
	vec3 x3 = x0 - D.yyy;
	
	i = i - floor(i * (1.0 / 289.0)) * 289.0;
	vec4 p = _permute_simplex3_n0ise(_permute_simplex3_n0ise(_permute_simplex3_n0ise(
	 		i.z + vec4(0.0, i1.z, i2.z, 1.0))
		+   i.y + vec4(0.0, i1.y, i2.y, 1.0))
		+   i.x + vec4(0.0, i1.x, i2.x, 1.0));
	
	float n_ = 0.142857142857;
	vec3  ns = n_ * D.wyz - D.xzx;
	
	vec4 j = p - 49.0 * floor(p * ns.z * ns.z);
	
	vec4 x_ = floor(j * ns.z);
	vec4 y_ = floor(j - 7.0 * x_ );
	
	vec4 x = x_ *ns.x + vec4(ns.y);
	vec4 y = y_ *ns.x + vec4(ns.y);
	vec4 h = 1.0 - abs(x) - abs(y);
	
	vec4 b0 = vec4( x.xy, y.xy );
	vec4 b1 = vec4( x.zw, y.zw );
	
	vec4 s0 = floor(b0)*2.0 + 1.0;
	vec4 s1 = floor(b1)*2.0 + 1.0;
	vec4 sh = -step(h, vec4(0.0));
	
	vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
	vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;
	
	vec3 p0 = vec3(a0.xy,h.x);
	vec3 p1 = vec3(a0.zw,h.y);
	vec3 p2 = vec3(a1.xy,h.z);
	vec3 p3 = vec3(a1.zw,h.w);
	
	vec4 norm = 2.79284291400159 - 0.85373472095314 * vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3));
	p0 *= norm.x;
	p1 *= norm.y;
	p2 *= norm.z;
	p3 *= norm.w;
	
	vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), vec4(0.0));
	m = m * m;
	return 22.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), dot(p2,x2), dot(p3,x3) ) );
}


void vertex() {
// Output:0

}

void fragment() {
// Input:5
	vec3 n_out5p0 = vec3(UV, 0.0);

// ScaledTIME:6
	float n_in6p0 = 1.00000;
	float n_out6p0;
	{
		n_out6p0 = n_in6p0 * TIME;
	}

// SimplexNoise3D:2
	vec3 n_in2p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in2p2 = 5.00000;
	float n_out2p0;
	{
		n_out2p0 = simplex3dN0iseFunc(vec3((n_out5p0.xy + n_in2p1.xy) * n_in2p2, n_out6p0));
	}

// Output:0
	COLOR.a = n_out2p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -592.569, -31 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -200, 180 )
nodes/fragment/4/node = SubResource( 2 )
nodes/fragment/4/position = Vector2( 60, 80 )
nodes/fragment/5/node = SubResource( 3 )
nodes/fragment/5/position = Vector2( -460, 160 )
nodes/fragment/6/node = SubResource( 4 )
nodes/fragment/6/position = Vector2( -440, 280 )
nodes/fragment/connections = PoolIntArray( 2, 0, 0, 1, 5, 0, 2, 0, 6, 0, 2, 3 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 5 )

[sub_resource type="VisualShaderNodeInput" id=7]
input_name = "uv"

[sub_resource type="VisualShaderNodeVectorOp" id=8]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 11, 11, 11 ) ]
operator = 3

[sub_resource type="VisualShaderNodeTexture" id=9]
output_port_for_preview = 0
texture = ExtResource( 1 )

[sub_resource type="VisualShader" id=10]
code = "shader_type canvas_item;
render_mode blend_sub;

uniform sampler2D tex_frg_5;



void vertex() {
// Output:0

}

void fragment() {
// Input:2
	vec3 n_out2p0 = vec3(UV, 0.0);

// VectorOp:3
	vec3 n_in3p1 = vec3(11.00000, 11.00000, 11.00000);
	vec3 n_out3p0 = n_out2p0 / n_in3p1;

// Texture:5
	vec4 tex_frg_5_read = texture(tex_frg_5, n_out3p0.xy);
	vec3 n_out5p0 = tex_frg_5_read.rgb;
	float n_out5p1 = tex_frg_5_read.a;

// Output:0
	COLOR.rgb = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -564.569, -98 )
mode = 1
modes/blend = 2
flags/light_only = false
nodes/fragment/2/node = SubResource( 7 )
nodes/fragment/2/position = Vector2( -380, 100 )
nodes/fragment/3/node = SubResource( 8 )
nodes/fragment/3/position = Vector2( -200, 200 )
nodes/fragment/5/node = SubResource( 9 )
nodes/fragment/5/position = Vector2( 80, 0 )
nodes/fragment/connections = PoolIntArray( 2, 0, 3, 0, 3, 0, 5, 0, 5, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )

[sub_resource type="Animation" id=12]
resource_name = "spin"
length = 10.0
loop = true
tracks/0/type = "value"
tracks/0/path = NodePath("grid:rotation_degrees")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 10 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ 0.0, 360.0 ]
}
tracks/1/type = "value"
tracks/1/path = NodePath("shape:rotation_degrees")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/keys = {
"times": PoolRealArray( 0, 5, 10 ),
"transitions": PoolRealArray( 1, 1, 1 ),
"update": 0,
"values": [ 0.0, 360.0, 720.0 ]
}

[sub_resource type="CircleShape2D" id=13]
radius = 56.5685

[sub_resource type="StyleBoxFlat" id=14]
bg_color = Color( 0.0705882, 0.878431, 0.109804, 1 )

[sub_resource type="StyleBoxFlat" id=15]
bg_color = Color( 0.937255, 0.0705882, 0.0705882, 0.129412 )

[sub_resource type="RectangleShape2D" id=16]
extents = Vector2( 500, 500 )

[node name="control_node" type="Node2D"]
script = ExtResource( 5 )

[node name="shape" type="Polygon2D" parent="."]
show_behind_parent = true
rotation = 2.46145
scale = Vector2( 1.2, 1.2 )
texture = ExtResource( 1 )
polygon = PoolVector2Array( 0, -48, 32, -32, 48, 0, 32, 32, 0, 48, -32, 32, -48, 0, -32, -32 )

[node name="shape2" type="Polygon2D" parent="."]
show_behind_parent = true
material = SubResource( 6 )
texture_scale = Vector2( 3, 3 )
polygon = PoolVector2Array( 0, -48, 32, -32, 48, 0, 32, 32, 0, 48, -32, 32, -48, 0, -32, -32 )

[node name="grid" type="Sprite" parent="."]
show_behind_parent = true
material = SubResource( 11 )
rotation = 1.23073
scale = Vector2( 0.05, 0.05 )
texture = ExtResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
autoplay = "spin"
anims/spin = SubResource( 12 )

[node name="Area2D" type="Area2D" parent="."]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource( 13 )

[node name="ProgressBar" type="ProgressBar" parent="."]
visible = false
margin_left = -48.0
margin_top = 64.0
margin_right = 48.0
margin_bottom = 72.0
custom_styles/fg = SubResource( 14 )
custom_styles/bg = SubResource( 15 )
percent_visible = false
__meta__ = {
"_edit_use_anchors_": false
}

[node name="range" type="Area2D" parent="."]
collision_layer = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="range"]
shape = SubResource( 16 )

[node name="tower_casts" type="Node2D" parent="."]

[node name="right" type="RayCast2D" parent="tower_casts"]
position = Vector2( 64, 0 )
enabled = true
cast_to = Vector2( 300, 0 )

[node name="bottom" type="RayCast2D" parent="tower_casts"]
position = Vector2( 0, 64 )
enabled = true
cast_to = Vector2( 0, 300 )

[node name="top" type="RayCast2D" parent="tower_casts"]
position = Vector2( 0, -64 )
enabled = true
cast_to = Vector2( 0, -300 )

[node name="left" type="RayCast2D" parent="tower_casts"]
position = Vector2( -64, 0 )
enabled = true
cast_to = Vector2( -300, 0 )

[connection signal="body_entered" from="Area2D" to="." method="_on_Area2D_body_entered"]
[connection signal="body_exited" from="Area2D" to="." method="_on_Area2D_body_exited"]
