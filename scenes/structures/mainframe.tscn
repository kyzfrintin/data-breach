[gd_scene load_steps=16 format=2]

[ext_resource path="res://scenes/structures/mainframe.gd" type="Script" id=1]
[ext_resource path="res://addons/shaderV/rgba/posterize.gd" type="Script" id=3]
[ext_resource path="res://addons/shaderV/tools/TimeScaled.gd" type="Script" id=4]
[ext_resource path="res://addons/shaderV/rgba/noise/perlin3d.gd" type="Script" id=5]
[ext_resource path="res://circle.png" type="Texture" id=6]

[sub_resource type="VisualShaderNodeCustom" id=1]
output_port_for_preview = 0
default_input_values = [ 1, Vector3( 0, 0, 0 ), 2, 5, 3, 0 ]
script = ExtResource( 5 )

[sub_resource type="VisualShaderNodeCustom" id=2]
default_input_values = [ 0, 1.0 ]
script = ExtResource( 4 )

[sub_resource type="VisualShaderNodeCustom" id=3]
default_input_values = [ 1, 8.0 ]
script = ExtResource( 3 )

[sub_resource type="VisualShaderNodeTexture" id=4]
texture = ExtResource( 6 )

[sub_resource type="VisualShaderNodeVectorInterp" id=5]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 1, 1, 1 ), 2, Vector3( 0.8, 0.8, 0.8 ) ]

[sub_resource type="VisualShaderNodeVectorOp" id=6]
output_port_for_preview = 0
default_input_values = [ 0, Vector3( 0, 0, 0 ), 1, Vector3( 2, 2, 2 ) ]
operator = 2

[sub_resource type="VisualShader" id=7]
code = "shader_type canvas_item;
uniform sampler2D tex_frg_7;


// PerlinNoise3D

float perlin3dNoiseFunc(vec3 P) {
	vec3 Pi0 = floor(P);
	vec3 Pi1 = Pi0 + vec3(1.0);
	Pi0 = Pi0 - floor(Pi0 * (1.0 / 289.0)) * 289.0;
	Pi1 = Pi1 - floor(Pi1 * (1.0 / 289.0)) * 289.0;
	vec3 Pf0 = fract(P);
	vec3 Pf1 = Pf0 - vec3(1.0);
	vec4 ix = vec4(Pi0.x, Pi1.x, Pi0.x, Pi1.x);
	vec4 iy = vec4(Pi0.yy, Pi1.yy);
	vec4 iz0 = vec4(Pi0.z);
	vec4 iz1 = vec4(Pi1.z);
	
	vec4 ixy = (((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy))-
		floor(((((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*34.0)+1.0)*
		((((ix*34.0)+1.0)*ix)-floor(((ix*34.0)+1.0)*ix*(1.0/289.0))*289.0 + iy)*(1.0/289.0))*289.0;
	vec4 ixy0 = ((((ixy + iz0)*34.0)+1.0)*(ixy + iz0))-floor((((ixy + iz0)*34.0)+1.0)*(ixy + iz0)*(1.0/289.0))*289.0;
	vec4 ixy1 = ((((ixy + iz1)*34.0)+1.0)*(ixy + iz1))-floor((((ixy + iz1)*34.0)+1.0)*(ixy + iz1)*(1.0/289.0))*289.0;
	
	vec4 gx0 = ixy0 * (1.0 / 7.0);
	vec4 gy0 = fract(floor(gx0) * (1.0 / 7.0)) - 0.5;
	gx0 = fract(gx0);
	vec4 gz0 = vec4(0.5) - abs(gx0) - abs(gy0);
	vec4 sz0 = step(gz0, vec4(0.0));
	gx0 -= sz0 * (step(0.0, gx0) - 0.5);
	gy0 -= sz0 * (step(0.0, gy0) - 0.5);
	
	vec4 gx1 = ixy1 * (1.0 / 7.0);
	vec4 gy1 = fract(floor(gx1) * (1.0 / 7.0)) - 0.5;
	gx1 = fract(gx1);
	vec4 gz1 = vec4(0.5) - abs(gx1) - abs(gy1);
	vec4 sz1 = step(gz1, vec4(0.0));
	gx1 -= sz1 * (step(0.0, gx1) - 0.5);
	gy1 -= sz1 * (step(0.0, gy1) - 0.5);
	
	vec3 g000 = vec3(gx0.x,gy0.x,gz0.x);
	vec3 g100 = vec3(gx0.y,gy0.y,gz0.y);
	vec3 g010 = vec3(gx0.z,gy0.z,gz0.z);
	vec3 g110 = vec3(gx0.w,gy0.w,gz0.w);
	vec3 g001 = vec3(gx1.x,gy1.x,gz1.x);
	vec3 g101 = vec3(gx1.y,gy1.y,gz1.y);
	vec3 g011 = vec3(gx1.z,gy1.z,gz1.z);
	vec3 g111 = vec3(gx1.w,gy1.w,gz1.w);
	
	vec4 norm0 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g000, g000), dot(g010, g010), dot(g100, g100), dot(g110, g110));
	g000 *= norm0.x;
	g010 *= norm0.y;
	g100 *= norm0.z;
	g110 *= norm0.w;
	vec4 norm1 = 1.79284291400159 - 0.85373472095314 * vec4(dot(g001, g001), dot(g011, g011), dot(g101, g101), dot(g111, g111));
	g001 *= norm1.x;
	g011 *= norm1.y;
	g101 *= norm1.z;
	g111 *= norm1.w;
	
	float n000 = dot(g000, Pf0);
	float n100 = dot(g100, vec3(Pf1.x, Pf0.yz));
	float n010 = dot(g010, vec3(Pf0.x, Pf1.y, Pf0.z));
	float n110 = dot(g110, vec3(Pf1.xy, Pf0.z));
	float n001 = dot(g001, vec3(Pf0.xy, Pf1.z));
	float n101 = dot(g101, vec3(Pf1.x, Pf0.y, Pf1.z));
	float n011 = dot(g011, vec3(Pf0.x, Pf1.yz));
	float n111 = dot(g111, Pf1);
	
	vec3 fade_xyz = Pf0 * Pf0 * Pf0 * (Pf0 * (Pf0 * 6.0 - 15.0) + 10.0);
	vec4 n_z = mix(vec4(n000, n100, n010, n110), vec4(n001, n101, n011, n111), fade_xyz.z);
	vec2 n_yz = mix(n_z.xy, n_z.zw, fade_xyz.y);
	float n_xyz = mix(n_yz.x, n_yz.y, fade_xyz.x); 
	return 2.2 * n_xyz;
}

// Posterize

vec3 p0ster1zeFunc(vec3 _col_p0sr1ze, float _steps_p0sterize){
	return floor(_col_p0sr1ze * _steps_p0sterize) / (_steps_p0sterize - 1.0);
}


void vertex() {
// Output:0

}

void fragment() {
// Texture:7
	vec4 tex_frg_7_read = texture(tex_frg_7, UV.xy);
	vec3 n_out7p0 = tex_frg_7_read.rgb;
	float n_out7p1 = tex_frg_7_read.a;

// ScaledTIME:3
	float n_in3p0 = 1.00000;
	float n_out3p0;
	{
		n_out3p0 = n_in3p0 * TIME;
	}

// PerlinNoise3D:2
	vec3 n_in2p1 = vec3(0.00000, 0.00000, 0.00000);
	float n_in2p2 = 5.00000;
	float n_out2p0;
	{
		n_out2p0 = perlin3dNoiseFunc(vec3((UV.xy+n_in2p1.xy) * n_in2p2, n_out3p0));
	}

// Posterize:6
	float n_in6p1 = 8.00000;
	vec3 n_out6p0;
	{
		n_out6p0 = p0ster1zeFunc(vec3(n_out2p0), n_in6p1);
	}

// VectorMix:8
	vec3 n_in8p2 = vec3(0.80000, 0.80000, 0.80000);
	vec3 n_out8p0 = mix(n_out7p0, n_out6p0, n_in8p2);

// VectorOp:9
	vec3 n_in9p1 = vec3(2.00000, 2.00000, 2.00000);
	vec3 n_out9p0 = n_out8p0 * n_in9p1;

// Output:0
	COLOR.rgb = n_out9p0;
	COLOR.a = n_out7p1;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -61, 56 )
mode = 1
flags/light_only = false
nodes/fragment/0/position = Vector2( 880, 100 )
nodes/fragment/2/node = SubResource( 1 )
nodes/fragment/2/position = Vector2( -120, 240 )
nodes/fragment/3/node = SubResource( 2 )
nodes/fragment/3/position = Vector2( -420, 320 )
nodes/fragment/6/node = SubResource( 3 )
nodes/fragment/6/position = Vector2( 140, 220 )
nodes/fragment/7/node = SubResource( 4 )
nodes/fragment/7/position = Vector2( -160, -40 )
nodes/fragment/8/node = SubResource( 5 )
nodes/fragment/8/position = Vector2( 400, 80 )
nodes/fragment/9/node = SubResource( 6 )
nodes/fragment/9/position = Vector2( 680, 80 )
nodes/fragment/connections = PoolIntArray( 3, 0, 2, 3, 2, 0, 6, 0, 6, 0, 8, 1, 7, 1, 0, 1, 7, 0, 8, 0, 8, 0, 9, 0, 9, 0, 0, 0 )

[sub_resource type="ShaderMaterial" id=8]
shader = SubResource( 7 )

[sub_resource type="CircleShape2D" id=9]
radius = 72.4431

[sub_resource type="RectangleShape2D" id=10]
extents = Vector2( 500, 500 )

[node name="mainframe" type="Node2D"]
modulate = Color( 1, 1, 1, 0.694118 )
script = ExtResource( 1 )

[node name="out_box" type="Sprite" parent="."]
material = SubResource( 8 )
scale = Vector2( 0.2, 0.2 )
texture = ExtResource( 6 )

[node name="out_box2" type="Sprite" parent="."]
material = SubResource( 8 )
rotation = 1.13446
scale = Vector2( 0.15, 0.15 )
texture = ExtResource( 6 )

[node name="out_box3" type="Sprite" parent="."]
material = SubResource( 8 )
rotation = 2.0944
scale = Vector2( 0.1, 0.1 )
texture = ExtResource( 6 )

[node name="StaticBody2D" type="StaticBody2D" parent="."]
input_pickable = true

[node name="CollisionShape2D" type="CollisionShape2D" parent="StaticBody2D"]
shape = SubResource( 9 )

[node name="range" type="Area2D" parent="."]
collision_layer = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="range"]
shape = SubResource( 10 )

[node name="AI_SPOTS" type="Node2D" parent="."]

[node name="small_row_1" type="Node2D" parent="AI_SPOTS"]

[node name="Position2D" type="Position2D" parent="AI_SPOTS/small_row_1"]
position = Vector2( -384, -384 )

[node name="Position2D2" type="Position2D" parent="AI_SPOTS/small_row_1"]
position = Vector2( -320, -384 )

[node name="Position2D3" type="Position2D" parent="AI_SPOTS/small_row_1"]
position = Vector2( -384, -320 )

[node name="Position2D4" type="Position2D" parent="AI_SPOTS/small_row_1"]
position = Vector2( -320, -320 )

[node name="Position2D5" type="Position2D" parent="AI_SPOTS/small_row_1"]
position = Vector2( -384, -256 )

[node name="Position2D6" type="Position2D" parent="AI_SPOTS/small_row_1"]
position = Vector2( -320, -256 )

[node name="Position2D7" type="Position2D" parent="AI_SPOTS/small_row_1"]
position = Vector2( -256, -384 )

[node name="Position2D8" type="Position2D" parent="AI_SPOTS/small_row_1"]
position = Vector2( -256, -320 )

[node name="Position2D9" type="Position2D" parent="AI_SPOTS/small_row_1"]
position = Vector2( -256, -256 )

[node name="large" type="Node2D" parent="AI_SPOTS"]

[connection signal="body_entered" from="range" to="." method="_on_range_body_entered"]
[connection signal="body_exited" from="range" to="." method="_on_range_body_exited"]
